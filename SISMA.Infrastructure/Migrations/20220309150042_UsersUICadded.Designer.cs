// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SISMA.Infrastructure.Data;

#nullable disable

namespace SISMA.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220309150042_UsersUICadded")]
    partial class UsersUICadded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SISMA.Infrastructure.Contracts.LogOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("Controller")
                        .HasColumnType("text")
                        .HasColumnName("controller");

                    b.Property<DateTime>("DateWrt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_wrt");

                    b.Property<string>("ObjectId")
                        .HasColumnType("text")
                        .HasColumnName("object_id");

                    b.Property<string>("Operation")
                        .HasColumnType("text")
                        .HasColumnName("operation");

                    b.Property<string>("UserData")
                        .HasColumnType("text")
                        .HasColumnName("user_data");

                    b.Property<string>("UserWrt")
                        .HasColumnType("text")
                        .HasColumnName("user_wrt");

                    b.HasKey("Id")
                        .HasName("pk_log_operation");

                    b.ToTable("log_operation", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonCourt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApealRegionId")
                        .HasColumnType("integer")
                        .HasColumnName("apeal_region_id");

                    b.Property<string>("CityCode")
                        .HasColumnType("text")
                        .HasColumnName("city_code");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("CourtTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("court_type_id");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Latitude")
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_object_id");

                    b.HasKey("Id")
                        .HasName("pk_common_court");

                    b.HasIndex("ApealRegionId")
                        .HasDatabaseName("ix_common_court_apeal_region_id");

                    b.HasIndex("CourtTypeId")
                        .HasDatabaseName("ix_common_court_court_type_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_common_court_parent_id");

                    b.ToTable("common_court", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonCourtEkatte", b =>
                {
                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<int>("EkEkatteId")
                        .HasColumnType("integer")
                        .HasColumnName("ek_ekatte_id");

                    b.HasKey("CourtId", "EkEkatteId")
                        .HasName("pk_common_court_ekatte");

                    b.HasIndex("EkEkatteId")
                        .HasDatabaseName("ix_common_court_ekatte_ek_ekatte_id");

                    b.ToTable("common_court_ekatte", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonInquest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApealRegionId")
                        .HasColumnType("integer")
                        .HasColumnName("apeal_region_id");

                    b.Property<string>("CityCode")
                        .HasColumnType("text")
                        .HasColumnName("city_code");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("InquestTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("inquest_type_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Latitude")
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_object_id");

                    b.HasKey("Id")
                        .HasName("pk_common_inquest");

                    b.HasIndex("ApealRegionId")
                        .HasDatabaseName("ix_common_inquest_apeal_region_id");

                    b.HasIndex("InquestTypeId")
                        .HasDatabaseName("ix_common_inquest_inquest_type_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_common_inquest_parent_id");

                    b.ToTable("common_inquest", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonProsecutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApealRegionId")
                        .HasColumnType("integer")
                        .HasColumnName("apeal_region_id");

                    b.Property<string>("CityCode")
                        .HasColumnType("text")
                        .HasColumnName("city_code");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EisppCode")
                        .HasColumnType("text")
                        .HasColumnName("eispp_code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<string>("Latitude")
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<int?>("ParentObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_object_id");

                    b.Property<int>("ProsecutorTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("prosecutor_type_id");

                    b.HasKey("Id")
                        .HasName("pk_common_prosecutor");

                    b.HasIndex("ApealRegionId")
                        .HasDatabaseName("ix_common_prosecutor_apeal_region_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_common_prosecutor_parent_id");

                    b.HasIndex("ProsecutorTypeId")
                        .HasDatabaseName("ix_common_prosecutor_prosecutor_type_id");

                    b.ToTable("common_prosecutor", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonProsecutorEkatte", b =>
                {
                    b.Property<int>("ProsecutorId")
                        .HasColumnType("integer")
                        .HasColumnName("prosecutor_id");

                    b.Property<int>("EkEkatteId")
                        .HasColumnType("integer")
                        .HasColumnName("ek_ekatte_id");

                    b.HasKey("ProsecutorId", "EkEkatteId")
                        .HasName("pk_common_prosecutor_ekatte");

                    b.HasIndex("EkEkatteId")
                        .HasDatabaseName("ix_common_prosecutor_ekatte_ek_ekatte_id");

                    b.ToTable("common_prosecutor_ekatte", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("SubjectTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_type_id");

                    b.HasKey("Id")
                        .HasName("pk_common_subject");

                    b.HasIndex("SubjectTypeId")
                        .HasDatabaseName("ix_common_subject_subject_type_id");

                    b.ToTable("common_subject", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Ekatte.EkCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("EISPPCode")
                        .HasColumnType("text")
                        .HasColumnName("eispp_code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("CountryId")
                        .HasName("pk_ek_country");

                    b.ToTable("ek_country", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Ekatte.EkDistrict", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DistrictId"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .HasColumnType("text")
                        .HasColumnName("oblast");

                    b.Property<string>("Region")
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.HasKey("DistrictId")
                        .HasName("pk_ek_district");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_ek_district_country_id");

                    b.ToTable("ek_district", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Ekatte.EkEkatte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Altitude")
                        .HasColumnType("text")
                        .HasColumnName("altitude");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("EisppCode")
                        .HasColumnType("text")
                        .HasColumnName("eispp_code");

                    b.Property<string>("Ekatte")
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Kind")
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<string>("Kmetstvo")
                        .HasColumnType("text")
                        .HasColumnName("kmetstvo");

                    b.Property<string>("Lat")
                        .HasColumnType("text")
                        .HasColumnName("lat");

                    b.Property<string>("Lon")
                        .HasColumnType("text")
                        .HasColumnName("lon");

                    b.Property<int?>("MunicipalId")
                        .HasColumnType("integer")
                        .HasColumnName("municipal_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Oblast")
                        .HasColumnType("text")
                        .HasColumnName("oblast");

                    b.Property<string>("Obstina")
                        .HasColumnType("text")
                        .HasColumnName("obstina");

                    b.Property<string>("TVM")
                        .HasColumnType("text")
                        .HasColumnName("tvm");

                    b.Property<string>("Tsb")
                        .HasColumnType("text")
                        .HasColumnName("tsb");

                    b.HasKey("Id")
                        .HasName("pk_ek_ekatte");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_ek_ekatte_country_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ek_ekatte_district_id");

                    b.HasIndex("MunicipalId")
                        .HasDatabaseName("ix_ek_ekatte_municipal_id");

                    b.ToTable("ek_ekatte", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Ekatte.EkMunincipality", b =>
                {
                    b.Property<int>("MunicipalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("municipality_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MunicipalityId"));

                    b.Property<string>("Abc")
                        .HasColumnType("text")
                        .HasColumnName("abc");

                    b.Property<string>("Category")
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer")
                        .HasColumnName("district_id");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Ekatte")
                        .HasColumnType("text")
                        .HasColumnName("ekatte");

                    b.Property<string>("Municipality")
                        .HasColumnType("text")
                        .HasColumnName("municipality");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("MunicipalityId")
                        .HasName("pk_ek_munincipality");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_ek_munincipality_district_id");

                    b.ToTable("ek_munincipality", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_identity_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("role_name_index");

                    b.ToTable("identity_roles", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_identity_role_claims_role_id");

                    b.ToTable("identity_role_claims", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("must_change_password");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UIC")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("uic");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_identity_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("email_index");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("user_name_index");

                    b.ToTable("identity_users", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_identity_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identity_user_claims_user_id");

                    b.ToTable("identity_user_claims", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("ProviderKey", "LoginProvider")
                        .HasName("pk_identity_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_identity_user_logins_user_id");

                    b.ToTable("identity_user_logins", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_identity_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_identity_user_roles_role_id");

                    b.ToTable("identity_user_roles", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_identity_user_tokens");

                    b.ToTable("identity_user_tokens", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomApealRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApealRegionType")
                        .HasColumnType("integer")
                        .HasColumnName("apeal_region_type");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_apeal_region");

                    b.ToTable("nom_apeal_region", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCaseCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_case_code");

                    b.ToTable("nom_case_code", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCaseCodeCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("case_code_id");

                    b.Property<int>("CatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_id");

                    b.HasKey("Id")
                        .HasName("pk_nom_case_code_catalog");

                    b.HasIndex("CaseCodeId")
                        .HasDatabaseName("ix_nom_case_code_catalog_case_code_id");

                    b.HasIndex("CatalogId")
                        .HasDatabaseName("ix_nom_case_code_catalog_catalog_id");

                    b.ToTable("nom_case_code_catalog", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("DetailType")
                        .HasColumnType("integer")
                        .HasColumnName("detail_type");

                    b.Property<int>("IntegrationId")
                        .HasColumnType("integer")
                        .HasColumnName("integration_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("PeriodType")
                        .HasColumnType("integer")
                        .HasColumnName("period_type");

                    b.HasKey("Id")
                        .HasName("pk_nom_catalog");

                    b.HasIndex("IntegrationId")
                        .HasDatabaseName("ix_nom_catalog_integration_id");

                    b.ToTable("nom_catalog", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_catalog_code");

                    b.HasIndex("CatalogId")
                        .HasDatabaseName("ix_nom_catalog_code_catalog_id");

                    b.ToTable("nom_catalog_code", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCourtType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_court_type");

                    b.ToTable("nom_court_type", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomInquestType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_inquest_type");

                    b.ToTable("nom_inquest_type", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomIntegration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_integration");

                    b.ToTable("nom_integration", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomProsecutorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_prosecutor_type");

                    b.ToTable("nom_prosecutor_type", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomReportSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_report_source");

                    b.ToTable("nom_report_source", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomReportState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_report_state");

                    b.ToTable("nom_report_state", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("EntityList")
                        .HasColumnType("text")
                        .HasColumnName("entity_list");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int?>("RatioMultiplier")
                        .HasColumnType("integer")
                        .HasColumnName("ratio_multiplier");

                    b.Property<int?>("ReportCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("report_category_id");

                    b.Property<int>("ReportTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("report_type_id");

                    b.Property<string>("RowLabel")
                        .HasColumnType("text")
                        .HasColumnName("row_label");

                    b.Property<int?>("SecondCatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("second_catalog_code_id");

                    b.Property<int?>("SecondCatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("second_catalog_id");

                    b.Property<int?>("SecondIntegrationId")
                        .HasColumnType("integer")
                        .HasColumnName("second_integration_id");

                    b.HasKey("Id")
                        .HasName("pk_nom_stat_report");

                    b.HasIndex("CatalogId")
                        .HasDatabaseName("ix_nom_stat_report_catalog_id");

                    b.HasIndex("ReportCategoryId")
                        .HasDatabaseName("ix_nom_stat_report_report_category_id");

                    b.HasIndex("ReportTypeId")
                        .HasDatabaseName("ix_nom_stat_report_report_type_id");

                    b.HasIndex("SecondCatalogCodeId")
                        .HasDatabaseName("ix_nom_stat_report_second_catalog_code_id");

                    b.HasIndex("SecondCatalogId")
                        .HasDatabaseName("ix_nom_stat_report_second_catalog_id");

                    b.HasIndex("SecondIntegrationId")
                        .HasDatabaseName("ix_nom_stat_report_second_integration_id");

                    b.ToTable("nom_stat_report", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("IntegrationId")
                        .HasColumnType("integer")
                        .HasColumnName("integration_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_stat_report_category");

                    b.HasIndex("IntegrationId")
                        .HasDatabaseName("ix_nom_stat_report_category_integration_id");

                    b.ToTable("nom_stat_report_category", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("case_code_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("StatReportId")
                        .HasColumnType("integer")
                        .HasColumnName("stat_report_id");

                    b.HasKey("Id")
                        .HasName("pk_nom_stat_report_code");

                    b.HasIndex("CaseCodeId")
                        .HasDatabaseName("ix_nom_stat_report_code_case_code_id");

                    b.HasIndex("StatReportId")
                        .HasDatabaseName("ix_nom_stat_report_code_stat_report_id");

                    b.ToTable("nom_stat_report_code", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportCol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_code_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.Property<int>("StatReportId")
                        .HasColumnType("integer")
                        .HasColumnName("stat_report_id");

                    b.HasKey("Id")
                        .HasName("pk_nom_stat_report_col");

                    b.HasIndex("CatalogCodeId")
                        .HasDatabaseName("ix_nom_stat_report_col_catalog_code_id");

                    b.HasIndex("StatReportId")
                        .HasDatabaseName("ix_nom_stat_report_col_stat_report_id");

                    b.ToTable("nom_stat_report_col", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("DefaultRowLabel")
                        .HasColumnType("text")
                        .HasColumnName("default_row_label");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_stat_report_type");

                    b.ToTable("nom_stat_report_type", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomSubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer")
                        .HasColumnName("order_number");

                    b.HasKey("Id")
                        .HasName("pk_nom_subject_type");

                    b.ToTable("nom_subject_type", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportCis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_code_id");

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<int>("InquestId")
                        .HasColumnType("integer")
                        .HasColumnName("inquest_id");

                    b.Property<int>("InquestObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("inquest_object_id");

                    b.Property<long>("ReportDataId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_data_id");

                    b.HasKey("Id")
                        .HasName("pk_report_cis");

                    b.HasIndex("CatalogCodeId")
                        .HasDatabaseName("ix_report_cis_catalog_code_id");

                    b.HasIndex("InquestId")
                        .HasDatabaseName("ix_report_cis_inquest_id");

                    b.HasIndex("ReportDataId")
                        .HasDatabaseName("ix_report_cis_report_data_id");

                    b.ToTable("report_cis", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CatalogId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_id");

                    b.Property<int>("IntegrationId")
                        .HasColumnType("integer")
                        .HasColumnName("integration_id");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("report_date");

                    b.Property<int>("ReportPeriod")
                        .HasColumnType("integer")
                        .HasColumnName("report_period");

                    b.Property<int>("ReportSourceId")
                        .HasColumnType("integer")
                        .HasColumnName("report_source_id");

                    b.Property<int>("ReportStateId")
                        .HasColumnType("integer")
                        .HasColumnName("report_state_id");

                    b.Property<int>("ReportYear")
                        .HasColumnType("integer")
                        .HasColumnName("report_year");

                    b.HasKey("Id")
                        .HasName("pk_report_data");

                    b.HasIndex("CatalogId")
                        .HasDatabaseName("ix_report_data_catalog_id");

                    b.HasIndex("IntegrationId")
                        .HasDatabaseName("ix_report_data_integration_id");

                    b.HasIndex("ReportSourceId")
                        .HasDatabaseName("ix_report_data_report_source_id");

                    b.HasIndex("ReportStateId")
                        .HasDatabaseName("ix_report_data_report_state_id");

                    b.ToTable("report_data", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEdis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_code_id");

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<int>("CourtObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("court_object_id");

                    b.Property<long>("ReportDataId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_data_id");

                    b.HasKey("Id")
                        .HasName("pk_report_edis");

                    b.HasIndex("CatalogCodeId")
                        .HasDatabaseName("ix_report_edis_catalog_code_id");

                    b.HasIndex("CourtId")
                        .HasDatabaseName("ix_report_edis_court_id");

                    b.HasIndex("ReportDataId")
                        .HasDatabaseName("ix_report_edis_report_data_id");

                    b.ToTable("report_edis", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEdisSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<long>("ReportEdisId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_edis_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_report_edis_subject");

                    b.HasIndex("ReportEdisId")
                        .HasDatabaseName("ix_report_edis_subject_report_edis_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_report_edis_subject_subject_id");

                    b.ToTable("report_edis_subject", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEispp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_code_id");

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<int>("InquestId")
                        .HasColumnType("integer")
                        .HasColumnName("inquest_id");

                    b.Property<int>("InquestObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("inquest_object_id");

                    b.Property<long>("ReportDataId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_data_id");

                    b.HasKey("Id")
                        .HasName("pk_report_eispp");

                    b.HasIndex("CatalogCodeId")
                        .HasDatabaseName("ix_report_eispp_catalog_code_id");

                    b.HasIndex("InquestId")
                        .HasDatabaseName("ix_report_eispp_inquest_id");

                    b.HasIndex("ReportDataId")
                        .HasDatabaseName("ix_report_eispp_report_data_id");

                    b.ToTable("report_eispp", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEisppSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<long>("ReportEisppId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_eispp_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_report_eispp_subject");

                    b.HasIndex("ReportEisppId")
                        .HasDatabaseName("ix_report_eispp_subject_report_eispp_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_report_eispp_subject_subject_id");

                    b.ToTable("report_eispp_subject", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEiss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_code_id");

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<int>("CourtObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("court_object_id");

                    b.Property<long>("ReportDataId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_data_id");

                    b.HasKey("Id")
                        .HasName("pk_report_eiss");

                    b.HasIndex("CatalogCodeId")
                        .HasDatabaseName("ix_report_eiss_catalog_code_id");

                    b.HasIndex("CourtId")
                        .HasDatabaseName("ix_report_eiss_court_id");

                    b.HasIndex("ReportDataId")
                        .HasDatabaseName("ix_report_eiss_report_data_id");

                    b.ToTable("report_eiss", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEissCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CaseCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("case_code_id");

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<long>("ReportEissId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_eiss_id");

                    b.HasKey("Id")
                        .HasName("pk_report_eiss_code");

                    b.HasIndex("CaseCodeId")
                        .HasDatabaseName("ix_report_eiss_code_case_code_id");

                    b.HasIndex("ReportEissId")
                        .HasDatabaseName("ix_report_eiss_code_report_eiss_id");

                    b.ToTable("report_eiss_code", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEissCourt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<int>("CourtId")
                        .HasColumnType("integer")
                        .HasColumnName("court_id");

                    b.Property<int>("CourtObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("court_object_id");

                    b.Property<long>("ReportEissId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_eiss_id");

                    b.HasKey("Id")
                        .HasName("pk_report_eiss_court");

                    b.HasIndex("CourtId")
                        .HasDatabaseName("ix_report_eiss_court_court_id");

                    b.HasIndex("ReportEissId")
                        .HasDatabaseName("ix_report_eiss_court_report_eiss_id");

                    b.ToTable("report_eiss_court", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEissSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<long>("ReportEissId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_eiss_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("pk_report_eiss_subject");

                    b.HasIndex("ReportEissId")
                        .HasDatabaseName("ix_report_eiss_subject_report_eiss_id");

                    b.HasIndex("SubjectId")
                        .HasDatabaseName("ix_report_eiss_subject_subject_id");

                    b.ToTable("report_eiss_subject", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportNsi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AmmountValue")
                        .HasColumnType("numeric")
                        .HasColumnName("ammount_value");

                    b.Property<int>("CatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_code_id");

                    b.Property<string>("CityCode")
                        .HasColumnType("text")
                        .HasColumnName("city_code");

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<int>("EkatteId")
                        .HasColumnType("integer")
                        .HasColumnName("ekatte_id");

                    b.Property<long>("ReportDataId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_data_id");

                    b.HasKey("Id")
                        .HasName("pk_report_nsi");

                    b.HasIndex("CatalogCodeId")
                        .HasDatabaseName("ix_report_nsi_catalog_code_id");

                    b.HasIndex("EkatteId")
                        .HasDatabaseName("ix_report_nsi_ekatte_id");

                    b.HasIndex("ReportDataId")
                        .HasDatabaseName("ix_report_nsi_report_data_id");

                    b.ToTable("report_nsi", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportUis", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CatalogCodeId")
                        .HasColumnType("integer")
                        .HasColumnName("catalog_code_id");

                    b.Property<int>("CountValue")
                        .HasColumnType("integer")
                        .HasColumnName("count_value");

                    b.Property<int>("ProsecutorId")
                        .HasColumnType("integer")
                        .HasColumnName("prosecutor_id");

                    b.Property<int>("ProsecutorObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("prosecutor_object_id");

                    b.Property<long>("ReportDataId")
                        .HasColumnType("bigint")
                        .HasColumnName("report_data_id");

                    b.HasKey("Id")
                        .HasName("pk_report_uis");

                    b.HasIndex("CatalogCodeId")
                        .HasDatabaseName("ix_report_uis_catalog_code_id");

                    b.HasIndex("ProsecutorId")
                        .HasDatabaseName("ix_report_uis_prosecutor_id");

                    b.HasIndex("ReportDataId")
                        .HasDatabaseName("ix_report_uis_report_data_id");

                    b.ToTable("report_uis", (string)null);
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonCourt", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomApealRegion", "ApealRegion")
                        .WithMany()
                        .HasForeignKey("ApealRegionId")
                        .HasConstraintName("fk_common_court_nom_apeal_region_apeal_region_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCourtType", "CourtType")
                        .WithMany()
                        .HasForeignKey("CourtTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_court_nom_court_type_court_type_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonCourt", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_common_court_common_court_parent_id");

                    b.Navigation("ApealRegion");

                    b.Navigation("CourtType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonCourtEkatte", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonCourt", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_court_ekatte_common_court_court_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkEkatte", "Ekatte")
                        .WithMany()
                        .HasForeignKey("EkEkatteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_court_ekatte_ek_ekatte_ek_ekatte_id");

                    b.Navigation("Court");

                    b.Navigation("Ekatte");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonInquest", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomApealRegion", "ApealRegion")
                        .WithMany()
                        .HasForeignKey("ApealRegionId")
                        .HasConstraintName("fk_common_inquest_nom_apeal_region_apeal_region_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomInquestType", "InquestType")
                        .WithMany()
                        .HasForeignKey("InquestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_inquest_nom_inquest_type_inquest_type_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonProsecutor", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_common_inquest_common_prosecutor_parent_id");

                    b.Navigation("ApealRegion");

                    b.Navigation("InquestType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonProsecutor", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomApealRegion", "ApealRegion")
                        .WithMany()
                        .HasForeignKey("ApealRegionId")
                        .HasConstraintName("fk_common_prosecutor_nom_apeal_region_apeal_region_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonProsecutor", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_common_prosecutor_common_prosecutor_parent_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomProsecutorType", "ProsecutorType")
                        .WithMany()
                        .HasForeignKey("ProsecutorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_prosecutor_nom_prosecutor_type_prosecutor_type_id");

                    b.Navigation("ApealRegion");

                    b.Navigation("Parent");

                    b.Navigation("ProsecutorType");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonProsecutorEkatte", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkEkatte", "Ekatte")
                        .WithMany()
                        .HasForeignKey("EkEkatteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_prosecutor_ekatte_ek_ekatte_ek_ekatte_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonProsecutor", "Prosecutor")
                        .WithMany()
                        .HasForeignKey("ProsecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_prosecutor_ekatte_common_prosecutor_prosecutor_id");

                    b.Navigation("Ekatte");

                    b.Navigation("Prosecutor");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Common.CommonSubject", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomSubjectType", "SubjectType")
                        .WithMany()
                        .HasForeignKey("SubjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_common_subject_nom_subject_type_subject_type_id");

                    b.Navigation("SubjectType");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Ekatte.EkDistrict", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ek_district_ek_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Ekatte.EkEkatte", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ek_ekatte_ek_country_country_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_ek_ekatte_ek_district_district_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkMunincipality", "Munincipality")
                        .WithMany()
                        .HasForeignKey("MunicipalId")
                        .HasConstraintName("fk_ek_ekatte_ek_munincipality_municipal_id");

                    b.Navigation("Country");

                    b.Navigation("District");

                    b.Navigation("Munincipality");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Ekatte.EkMunincipality", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkDistrict", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_ek_munincipality_ek_district_district_id");

                    b.Navigation("District");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_role_claims_identity_roles_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_claims_identity_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_logins_identity_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Identity.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_roles_identity_roles_role_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_roles_identity_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Identity.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_user_tokens_identity_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCaseCodeCatalog", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCaseCode", "CaseCode")
                        .WithMany("CaseCodeCatalogs")
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_case_code_catalog_nom_case_code_case_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_case_code_catalog_nom_catalog_catalog_id");

                    b.Navigation("CaseCode");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalog", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomIntegration", "Integration")
                        .WithMany()
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_catalog_nom_integration_integration_id");

                    b.Navigation("Integration");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_catalog_code_nom_catalog_catalog_id");

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReport", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_stat_report_nom_catalog_catalog_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportCategory", "ReportCategory")
                        .WithMany()
                        .HasForeignKey("ReportCategoryId")
                        .HasConstraintName("fk_nom_stat_report_nom_stat_report_category_report_category_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_stat_report_nom_stat_report_type_report_type_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "SecondCatalogCode")
                        .WithMany()
                        .HasForeignKey("SecondCatalogCodeId")
                        .HasConstraintName("fk_nom_stat_report_nom_catalog_code_second_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalog", "SecondCatalog")
                        .WithMany()
                        .HasForeignKey("SecondCatalogId")
                        .HasConstraintName("fk_nom_stat_report_nom_catalog_second_catalog_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomIntegration", "SecondIntegration")
                        .WithMany()
                        .HasForeignKey("SecondIntegrationId")
                        .HasConstraintName("fk_nom_stat_report_nom_integration_second_integration_id");

                    b.Navigation("Catalog");

                    b.Navigation("ReportCategory");

                    b.Navigation("ReportType");

                    b.Navigation("SecondCatalog");

                    b.Navigation("SecondCatalogCode");

                    b.Navigation("SecondIntegration");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportCategory", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomIntegration", "Integration")
                        .WithMany()
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_stat_report_category_nom_integration_integration_id");

                    b.Navigation("Integration");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportCode", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_stat_report_code_nom_case_code_case_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReport", "StatReport")
                        .WithMany("Codes")
                        .HasForeignKey("StatReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_stat_report_code_nom_stat_report_stat_report_id");

                    b.Navigation("CaseCode");

                    b.Navigation("StatReport");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReportCol", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "CatalogCode")
                        .WithMany()
                        .HasForeignKey("CatalogCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_stat_report_col_nom_catalog_code_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReport", "StatReport")
                        .WithMany("Columns")
                        .HasForeignKey("StatReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nom_stat_report_col_nom_stat_report_stat_report_id");

                    b.Navigation("CatalogCode");

                    b.Navigation("StatReport");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportCis", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "CatalogCode")
                        .WithMany()
                        .HasForeignKey("CatalogCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_cis_nom_catalog_code_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonInquest", "Inquest")
                        .WithMany()
                        .HasForeignKey("InquestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_cis_common_inquest_inquest_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportData", "ReportData")
                        .WithMany("DetailsCIS")
                        .HasForeignKey("ReportDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_cis_report_data_report_data_id");

                    b.Navigation("CatalogCode");

                    b.Navigation("Inquest");

                    b.Navigation("ReportData");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportData", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalog", "Catalog")
                        .WithMany()
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_data_nom_catalog_catalog_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomIntegration", "Integration")
                        .WithMany()
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_data_nom_integration_integration_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomReportSource", "ReportSource")
                        .WithMany()
                        .HasForeignKey("ReportSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_data_nom_report_source_report_source_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomReportState", "ReportState")
                        .WithMany()
                        .HasForeignKey("ReportStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_data_nom_report_state_report_state_id");

                    b.Navigation("Catalog");

                    b.Navigation("Integration");

                    b.Navigation("ReportSource");

                    b.Navigation("ReportState");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEdis", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "CatalogCode")
                        .WithMany()
                        .HasForeignKey("CatalogCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_edis_nom_catalog_code_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonCourt", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_edis_common_court_court_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportData", "ReportData")
                        .WithMany("DetailsEDIS")
                        .HasForeignKey("ReportDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_edis_report_data_report_data_id");

                    b.Navigation("CatalogCode");

                    b.Navigation("Court");

                    b.Navigation("ReportData");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEdisSubject", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportEdis", "ReportEdis")
                        .WithMany("Subjects")
                        .HasForeignKey("ReportEdisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_edis_subject_report_edis_report_edis_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_edis_subject_common_subject_subject_id");

                    b.Navigation("ReportEdis");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEispp", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "CatalogCode")
                        .WithMany()
                        .HasForeignKey("CatalogCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eispp_nom_catalog_code_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonInquest", "Inquest")
                        .WithMany()
                        .HasForeignKey("InquestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eispp_common_inquest_inquest_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportData", "ReportData")
                        .WithMany("DetailsEISPP")
                        .HasForeignKey("ReportDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eispp_report_data_report_data_id");

                    b.Navigation("CatalogCode");

                    b.Navigation("Inquest");

                    b.Navigation("ReportData");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEisppSubject", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportEispp", "ReportEispp")
                        .WithMany("Subjects")
                        .HasForeignKey("ReportEisppId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eispp_subject_report_eispp_report_eispp_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eispp_subject_common_subject_subject_id");

                    b.Navigation("ReportEispp");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEiss", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "CatalogCode")
                        .WithMany()
                        .HasForeignKey("CatalogCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_nom_catalog_code_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonCourt", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_common_court_court_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportData", "ReportData")
                        .WithMany("DetailsEISS")
                        .HasForeignKey("ReportDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_report_data_report_data_id");

                    b.Navigation("CatalogCode");

                    b.Navigation("Court");

                    b.Navigation("ReportData");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEissCode", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCaseCode", "CaseCode")
                        .WithMany()
                        .HasForeignKey("CaseCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_code_nom_case_code_case_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportEiss", "ReportEiss")
                        .WithMany("Codes")
                        .HasForeignKey("ReportEissId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_code_report_eiss_report_eiss_id");

                    b.Navigation("CaseCode");

                    b.Navigation("ReportEiss");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEissCourt", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonCourt", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_court_common_court_court_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportEiss", "ReportEiss")
                        .WithMany("Courts")
                        .HasForeignKey("ReportEissId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_court_report_eiss_report_eiss_id");

                    b.Navigation("Court");

                    b.Navigation("ReportEiss");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEissSubject", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportEiss", "ReportEiss")
                        .WithMany("Subjects")
                        .HasForeignKey("ReportEissId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_subject_report_eiss_report_eiss_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonSubject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_eiss_subject_common_subject_subject_id");

                    b.Navigation("ReportEiss");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportNsi", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "CatalogCode")
                        .WithMany()
                        .HasForeignKey("CatalogCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_nsi_nom_catalog_code_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Ekatte.EkEkatte", "Ekatte")
                        .WithMany()
                        .HasForeignKey("EkatteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_nsi_ek_ekatte_ekatte_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportData", "ReportData")
                        .WithMany("DetailsNSI")
                        .HasForeignKey("ReportDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_nsi_report_data_report_data_id");

                    b.Navigation("CatalogCode");

                    b.Navigation("Ekatte");

                    b.Navigation("ReportData");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportUis", b =>
                {
                    b.HasOne("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCatalogCode", "CatalogCode")
                        .WithMany()
                        .HasForeignKey("CatalogCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_uis_nom_catalog_code_catalog_code_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Common.CommonProsecutor", "Prosecutor")
                        .WithMany()
                        .HasForeignKey("ProsecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_uis_common_prosecutor_prosecutor_id");

                    b.HasOne("SISMA.Infrastructure.Data.Models.Report.ReportData", "ReportData")
                        .WithMany("DetailsUIS")
                        .HasForeignKey("ReportDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_report_uis_report_data_report_data_id");

                    b.Navigation("CatalogCode");

                    b.Navigation("Prosecutor");

                    b.Navigation("ReportData");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationRole", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Identity.ApplicationUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomCaseCode", b =>
                {
                    b.Navigation("CaseCodeCatalogs");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Nomenclatures.NomStatReport", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("Columns");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportData", b =>
                {
                    b.Navigation("DetailsCIS");

                    b.Navigation("DetailsEDIS");

                    b.Navigation("DetailsEISPP");

                    b.Navigation("DetailsEISS");

                    b.Navigation("DetailsNSI");

                    b.Navigation("DetailsUIS");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEdis", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEispp", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("SISMA.Infrastructure.Data.Models.Report.ReportEiss", b =>
                {
                    b.Navigation("Codes");

                    b.Navigation("Courts");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
